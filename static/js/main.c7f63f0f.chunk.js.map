{"version":3,"sources":["components/HomeDisplay.js","components/TotalQuestionInput.js","components/CategoryDropdown.js","components/DifficultyDropdown.js","components/ScoreDisplay.js","components/ProgressBar.js","components/QuestionDisplay.js","components/ChoiceDisplay.js","icons/autorenew-24px.svg","icons/arrow_forward_ios-24px.svg","components/BottomBar.js","components/App.js","reportWebVitals.js","index.js"],"names":["HomeDisplay","className","TotalQuestionInput","props","htmlFor","onChange","e","handleSetTotalQuestions","parseInt","target","value","type","id","name","defaultValue","min","max","CategoryDropdown","useState","categoryOptions","setCategoryOptions","useEffect","fetch","then","response","json","trivia_categories","handleSetCategory","selected","map","category","DifficultyDropdown","handleSetDifficulty","ScoreDisplay","showFinal","score","ProgressBar","fillerStyles","height","width","progress","backgroundColor","borderRadius","transition","textAlign","style","margin","QuestionDisplay","input","question","DOMParser","parseFromString","documentElement","textContent","ChoiceDisplay","decode","orderStyle","order","submitAnswer","selection","isAsking","increaseScore","setSelected","setIsAsking","onClick","correct","incorrect","length","BottomBar","visibility","canRestart","restart","src","alt","canNext","ready","next","App","trivia","setTrivia","sessionToken","setSessionToken","setCategory","difficulty","setDifficulty","setScore","currentQuestion","setCurrentQuestion","totalQuestions","setTotalQuestions","setOrder","isRetrieving","setIsRetrieving","showHome","setShowHome","setShowFinal","getToken","getTrivia","response_code","results","token","array","i","j","Math","floor","random","temp","shuffleOrder","correct_answer","incorrect_answers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,G,MAAc,WACvB,OACI,qBAAKC,UAAU,cAAf,SACI,iDCJCC,EAAqB,SAAAC,GAE9B,OACI,sBAAKF,UAAU,2BAAf,UACI,uBAAOG,QAAQ,sBAAf,iCACA,uBACIC,SAAW,SAAAC,GAAC,OAAIH,EAAMI,wBAAwBC,SAASF,EAAEG,OAAOC,SAChEC,KAAK,SACLC,GAAG,sBACHC,KAAK,sBACLC,aAAa,KACbC,IAAI,IAAIC,IAAI,WCXfC,EAAmB,SAAAd,GAAU,IAAD,EAESe,mBAAS,IAFlB,mBAE9BC,EAF8B,KAEbC,EAFa,KAkBrC,OAJAC,qBAAU,WATNC,MAAM,wCACDC,MAAM,SAAAC,GACH,OAAOA,EAASC,UAEnBF,MAAM,SAAAC,GACHJ,EAAmBI,EAASE,wBAMrC,IAGC,sBAAKzB,UAAU,wBAAf,UACI,uBAAOG,QAAQ,WAAf,sBACA,yBAAQS,KAAK,WAAWD,GAAG,WAAWP,SAAW,SAAAC,GAAC,OAAIH,EAAMwB,kBAAkBrB,EAAEG,OAAOC,QAAvF,UAEI,wBAAQkB,SAAS,WAAWlB,MAAM,IAAlC,iBAECS,EAAgBU,KAAK,SAAAC,GAAQ,OAC1B,wBAA0BpB,MAAOoB,EAASlB,GAA1C,SAA+CkB,EAASjB,MAA3CiB,EAASlB,cC1B7BmB,EAAqB,SAAA5B,GAE9B,OACI,sBAAKF,UAAU,0BAAf,UACI,uBAAOG,QAAQ,aAAf,wBACA,yBAAQS,KAAK,aAAaD,GAAG,aAAaP,SAAW,SAAAC,GAAC,OAAIH,EAAM6B,oBAAoB1B,EAAEG,OAAOC,QAA7F,UAEI,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,yBCTHuB,G,MAAe,SAAA9B,GACxB,OACI,sBAAKF,UAAS,uBAAkBE,EAAM+B,WAAa,qBAAnD,UACM/B,EAAM+B,WACJ,6CAEJ,6BAAK/B,EAAMgC,aCPVC,EAAc,SAAAjC,GACnB,IAQMkC,EAAe,CACnBC,OAAQ,OACRC,MAAM,GAAD,OAAKpC,EAAMqC,SAAX,KACLC,gBAAiB,UACjBC,aAAc,UACdC,WAAY,uBACZC,UAAW,SAGb,OACE,qBAAKC,MAlBiB,CACtBP,OAAQ,GACRC,MAAO,MACPE,gBAAiB,UACjBC,aAAc,GACdI,OAAQ,QAaR,SACE,qBAAKD,MAAOR,OCpBXU,EAAkB,SAAA5C,GAO3B,OACI,qBAAKF,UAAU,WAAf,SACI,6BAPQ+C,EAOI7C,EAAM8C,UANZ,IAAIC,WAAYC,gBAAgBH,EAAO,aACtCI,gBAAgBC,iBAF/B,IAAgBL,GCDPM,G,MAAgB,SAAAnD,GAEzB,SAASoD,EAAOP,GAEZ,OADU,IAAIE,WAAYC,gBAAgBH,EAAO,aACtCI,gBAAgBC,YAG/B,IAAMG,EAAa,CACf,CACIC,MAAM,GAAD,OAAMtD,EAAMsD,MAAM,KAE3B,CACIA,MAAM,GAAD,OAAMtD,EAAMsD,MAAM,KAE3B,CACIA,MAAM,GAAD,OAAKtD,EAAMsD,MAAM,KAE1B,CACIA,MAAM,GAAD,OAAKtD,EAAMsD,MAAM,MAIxBC,EAAe,SAACC,GACA,IAAdA,GAAmBxD,EAAMyD,SACzBzD,EAAM0D,gBAEN1D,EAAM2D,YAAYH,GAEtBxD,EAAM4D,aAAY,IAGtB,OACI,sBAAK9D,UAAU,gBAAf,UAEI,wBACIA,UAAS,eAAWE,EAAMyD,UAAY,WACtCI,QAAS,kBAAMN,EAAa,IAC5Bb,MAAOW,EAAW,GAHtB,SAG4BD,EAAOpD,EAAM8D,WAEzC,wBACIhE,UAAS,eAAWE,EAAMyD,UAAP,UAA0C,IAAnBzD,EAAMyB,SAAiB,YAAc,aAC/EoC,QAAS,kBAAMN,EAAa,IAC5Bb,MAAOW,EAAW,GAHtB,SAG4BD,EAAOpD,EAAM+D,UAAU,MAEjD/D,EAAM+D,UAAUC,QAAU,GACxB,wBACIlE,UAAS,eAAWE,EAAMyD,UAAP,UAA0C,IAAnBzD,EAAMyB,SAAiB,YAAc,aAC/EoC,QAAS,kBAAMN,EAAa,IAC5Bb,MAAOW,EAAW,GAHtB,SAG4BD,EAAOpD,EAAM+D,UAAU,MAG1B,IAA3B/D,EAAM+D,UAAUC,QACd,wBACIlE,UAAS,eAAWE,EAAMyD,UAAP,UAA0C,IAAnBzD,EAAMyB,SAAiB,YAAc,aAC/EoC,QAAS,kBAAMN,EAAa,IAC5Bb,MAAOW,EAAW,GAHtB,SAG4BD,EAAOpD,EAAM+D,UAAU,WC1DpD,G,MAAA,IAA0B,4CCA1B,MAA0B,mDCM5BE,EAAY,SAAAjE,GACrB,OACI,sBAAKF,UAAU,YAAf,UACI,wBACI4C,MAAO,CAACwB,WAAYlE,EAAMmE,WAAa,UAAY,UACnDrE,UAAU,gBACV+D,QAAS,kBAAM7D,EAAMoE,WAHzB,SAIQ,qBAAKC,IAAKD,EAASE,IAAI,cAI/B,wBACI5B,MAAO,CAACwB,WAAYlE,EAAMuE,SAAWvE,EAAMwE,MAAQ,UAAY,UAC/D1E,UAAU,aACV+D,QAAS,kBAAM7D,EAAMyE,QAHzB,SAIQ,qBAAKJ,IAAKI,EAAMH,IAAI,eCN3BI,G,YAAM,WAAO,IAAD,EAEK3D,mBAAS,IAFd,mBAEhB4D,EAFgB,KAERC,EAFQ,OAGiB7D,mBAAS,IAH1B,mBAGhB8D,EAHgB,KAGFC,EAHE,OAIS/D,mBAAS,IAJlB,mBAIhBY,EAJgB,KAINoD,EAJM,OAKahE,mBAAS,IALtB,mBAKhBiE,EALgB,KAKJC,EALI,OAOGlE,mBAAS,GAPZ,mBAOhBiB,EAPgB,KAOTkD,EAPS,OAQuBnE,oBAAU,GARjC,mBAQhBoE,EARgB,KAQCC,EARD,OASqBrE,mBAAS,IAT9B,mBAShBsE,EATgB,KASAC,EATA,OAUSvE,oBAAU,GAVnB,mBAUhBU,EAVgB,KAUNkC,EAVM,OAYG5C,mBAAS,CAAC,EAAE,EAAE,EAAE,IAZnB,mBAYhBuC,EAZgB,KAYTiC,EAZS,OAcSxE,oBAAS,GAdlB,mBAchB0C,EAdgB,KAcNG,EAdM,OAeiB7C,oBAAS,GAf1B,mBAehByE,GAfgB,KAeFC,GAfE,QAgBS1E,oBAAS,GAhBlB,qBAgBhB2E,GAhBgB,MAgBNC,GAhBM,SAiBW5E,oBAAS,GAjBpB,qBAiBhBgB,GAjBgB,MAiBL6D,GAjBK,MAmBvB1E,qBAAU,WACR2E,OAEC,IAEH3E,qBAAU,WACR4E,OAEC,CAACjB,EAAcQ,EAAgB1D,EAAUqD,IAE5C,IAAMc,GAAY,WAChBL,IAAgB,GAChBtE,MAAM,sCAAD,OAAuCkE,EAAvC,kBAA+DR,EAA/D,qBAAwFlD,EAAxF,uBAA+GqD,IACjH5D,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAC,GAC2B,IAA3BA,EAAS0E,gBACXN,IAAgB,GAChBb,EAAUvD,EAAS2E,cAKrBH,GAAW,WACf1E,MAAM,qDACHC,MAAM,SAAAC,GACL,OAAOA,EAASC,UAEjBF,MAAM,SAAAC,GACLyD,EAAiBzD,EAAS4E,WA4D1BxB,GAAO,WACPiB,IACFC,IAAY,GAEdhC,GAAa,GACbC,GAAY,GArBPuB,EAAkBE,EAAiB,EACtCD,EAAmBD,EAAkB,GAErCS,IAAa,GAnBK,WAGlB,IAFA,IAAIM,EAAQ5C,EAEH6C,EAAID,EAAMlC,OAAS,EAAGmC,EAAI,EAAGA,IAAK,CACvC,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAGX/C,GACA8B,EAASW,GA4BfO,IAGF,OACE,sBAAK3G,UAAU,MAAf,UACI4F,GACA,qCACE,cAAC,EAAD,IAEA,sBAAK5F,UAAU,UAAf,UACE,cAAC,EAAD,CAAoBM,wBAjEE,SAAAG,GAC9B+E,EAAkB/E,MAiEV,cAAC,EAAD,CAAkBiB,kBA9DF,SAAAjB,GACxBwE,EAAYxE,MA8DJ,cAAC,EAAD,CAAoBsB,oBA3DF,SAAAtB,GAC1B0E,EAAc1E,YA8DV,qCACE,cAAC,EAAD,CACEyB,MAAOA,EACPD,UAAWA,MAGVA,IACD,qCACE,cAAC,EAAD,CAAaM,SAAY8C,EAAkBE,EAAkB,MAE7D,cAAC,EAAD,CAAiBvC,SAAU6B,EAAOQ,GAAiBrC,WAEnD,cAAC,EAAD,CACEgB,QAASa,EAAOQ,GAAiBuB,eACjC3C,UAAWY,EAAOQ,GAAiBwB,kBACnCjD,cAAe,WAzE3BwB,EAASlD,EAAQ,IA0ELyC,KAAM,kBAAMA,MACZnB,MAAOA,EACP7B,SAAUA,EACVgC,SAAUA,EACVG,YAnGY,SAAArD,GACxBqD,EAAYrD,IAmGAoD,YAhGY,SAAApD,GACxBoD,EAAYpD,YAsGV,cAAC,EAAD,CACEiE,MAAuB,MAAhBK,EACPV,YAAcuB,GACdtB,QAAS,kBA9Dbc,EAAS,GACTY,KACAV,GAAoB,GACpBxB,GAAY,GACZgC,IAAa,QACbD,IAAY,IA0DRpB,SAAUd,IAAa+B,GACvBf,KAAM,kBAAMA,aCxKLmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1F,MAAK,YAAkD,IAA/C2F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c7f63f0f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/HomeDisplay.css\";\n\nexport const HomeDisplay = () => {\n    return (\n        <div className=\"homeDisplay\">\n            <h1>More Trivia</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const TotalQuestionInput = props => {\n\n    return (\n        <div className=\"totalQuestionInput input\">\n            <label htmlFor=\"Number of Questions\">Number of Questions</label>\n            <input \n                onChange={ e => props.handleSetTotalQuestions(parseInt(e.target.value))}\n                type=\"number\" \n                id=\"Number of Questions\" \n                name=\"Number of Questions\"\n                defaultValue=\"10\"\n                min=\"1\" max=\"50\"\n            />\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\n\nexport const CategoryDropdown = props => {\n\n    const [categoryOptions, setCategoryOptions] = useState([]);\n\n    const getCategories = () => {\n        fetch(`https://opentdb.com/api_category.php`)\n            .then( response => {\n                return response.json();\n            })\n            .then( response => {\n                setCategoryOptions(response.trivia_categories);\n            })\n    }\n\n    useEffect(() => {\n        getCategories()\n    }, [])\n\n    return (\n        <div className=\"categoryMenu dropdown\">\n            <label htmlFor=\"category\">Category</label>\n            <select name=\"Category\" id=\"category\" onChange={ e => props.handleSetCategory(e.target.value)}>\n            \n                <option selected=\"selected\" value=\"0\">Any</option>\n                \n                {categoryOptions.map( category => (\n                    <option key={category.id} value={category.id}>{category.name}</option>\n                ))}\n\n            </select>        \n        </div>\n    )\n}\n","import React from 'react'\n\nexport const DifficultyDropdown = props => {\n    \n    return (\n        <div className=\"difficultyMenu dropdown\">\n            <label htmlFor=\"difficulty\">Difficulty</label>\n            <select name=\"Difficulty\" id=\"difficulty\" onChange={ e => props.handleSetDifficulty(e.target.value)}>\n            \n                <option value=\"0\">Any</option>\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n\n            </select>        \n        </div>\n    )\n}\n","import React from 'react'\nimport \"../styles/ScoreDisplay.css\";\n\nexport const ScoreDisplay = props => {\n    return (\n        <div className={`scoreDisplay ${props.showFinal && \"finalScoreDisplay\" }`}>\n            { props.showFinal &&\n                <h2>Your score:</h2>\n            }\n            <h1>{props.score}</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const ProgressBar = props => {\n        const containerStyles = {\n          height: 20,\n          width: '80%',\n          backgroundColor: \"#e0e0de\",\n          borderRadius: 50,\n          margin: 'auto'\n        }\n      \n        const fillerStyles = {\n          height: '100%',\n          width: `${props.progress}%`,\n          backgroundColor: '#063838',\n          borderRadius: 'inherit',\n          transition: 'width 1s ease-in-out',\n          textAlign: 'right'\n        }\n      \n        return (\n          <div style={containerStyles}>\n            <div style={fillerStyles}></div>\n          </div>\n        )\n}\n","import React from 'react'\n\nexport const QuestionDisplay = props => {\n\n    function decode(input) {\n        var doc = new DOMParser().parseFromString(input, \"text/html\");\n        return doc.documentElement.textContent;\n      }\n      \n    return (\n        <div className=\"question\">\n            <p>{decode( props.question )}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"../styles/ChoiceDisplay.css\";\n\nexport const ChoiceDisplay = props => {\n\n    function decode(input) {\n        var doc = new DOMParser().parseFromString(input, \"text/html\");\n        return doc.documentElement.textContent;\n      }\n\n    const orderStyle = [\n        {\n            order: `${ props.order[0]}`\n        },\n        {\n            order: `${ props.order[1]}`\n        },\n        {\n            order: `${props.order[2]}`\n        },\n        {\n            order: `${props.order[3]}`\n        },\n    ]\n\n    const submitAnswer = (selection) => {\n        if (selection === 0 && props.isAsking) {\n            props.increaseScore();\n        } else {\n            props.setSelected(selection);\n        }\n        props.setIsAsking(false);\n    }\n\n    return (\n        <div className=\"choiceDisplay\">\n\n            <button \n                className={`btn ${ !props.isAsking && \"correct\"}`}\n                onClick={() => submitAnswer(0)}\n                style={orderStyle[0]} >{decode(props.correct)}</button>\n\n            <button \n                className={`btn ${ !props.isAsking && `${ props.selected === 1 ? \"incorrect\" : \"disabled\"}`}`}\n                onClick={() => submitAnswer(1)}\n                style={orderStyle[1]} >{decode(props.incorrect[0])}</button>\n\n            { props.incorrect.length >= 2 &&\n                <button \n                    className={`btn ${ !props.isAsking && `${ props.selected === 2 ? \"incorrect\" : \"disabled\"}`}`}\n                    onClick={() => submitAnswer(2)}\n                    style={orderStyle[2]} >{decode(props.incorrect[1])}</button>\n            }\n\n            { props.incorrect.length === 3 &&\n                <button \n                    className={`btn ${ !props.isAsking && `${ props.selected === 3 ? \"incorrect\" : \"disabled\"}`}`}\n                    onClick={() => submitAnswer(3)}\n                    style={orderStyle[3]} >{decode(props.incorrect[2])}</button>\n            }\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/autorenew-24px.1a05fe15.svg\";","export default __webpack_public_path__ + \"static/media/arrow_forward_ios-24px.e2038e8d.svg\";","import React from 'react'\nimport \"../styles/BottomBar.css\";\n\nimport restart from \"../icons/autorenew-24px.svg\";\nimport next from \"../icons/arrow_forward_ios-24px.svg\";\n\nexport const BottomBar = props => {\n    return (\n        <div className=\"bottomBar\">\n            <button \n                style={{visibility: props.canRestart ? \"visible\" : \"hidden\"}}\n                className=\"restartButton\" \n                onClick={() => props.restart()}>\n                    <img src={restart} alt=\"Restart\" />\n            </button>\n        \n\n            <button \n                style={{visibility: props.canNext && props.ready ? \"visible\" : \"hidden\"}}\n                className=\"nextButton\" \n                onClick={() => props.next()}>\n                    <img src={next} alt=\"Next\" />\n            </button>\n            \n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { HomeDisplay } from \"./HomeDisplay.js\";\nimport { TotalQuestionInput } from \"./TotalQuestionInput.js\";\nimport { CategoryDropdown } from \"./CategoryDropdown.js\";\nimport { DifficultyDropdown } from \"./DifficultyDropdown.js\";\n\nimport { ScoreDisplay } from \"./ScoreDisplay.js\";\nimport { ProgressBar } from \"./ProgressBar.js\";\nimport { QuestionDisplay } from \"./QuestionDisplay.js\";\nimport { ChoiceDisplay } from \"./ChoiceDisplay.js\";\nimport { BottomBar } from \"./BottomBar.js\";\n\nimport '../styles/App.css';\nimport '../styles/Options.css';\n\nexport const App = () => {\n\n  const [trivia, setTrivia] = useState({});\n  const [sessionToken, setSessionToken] = useState(\"\");\n  const [category, setCategory] = useState(\"\")\n  const [difficulty, setDifficulty] = useState(\"\")\n\n  const [score, setScore] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(-1);\n  const [totalQuestions, setTotalQuestions] = useState(10);\n  const [selected, setSelected] = useState(-1);\n\n  const [order, setOrder] = useState([0,1,2,3])\n\n  const [isAsking, setIsAsking] = useState(false);\n  const [isRetrieving, setIsRetrieving] = useState(false);\n  const [showHome, setShowHome] = useState(true);\n  const [showFinal, setShowFinal] = useState(false);\n\n  useEffect(() => {\n    getToken();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    getTrivia();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sessionToken, totalQuestions, category, difficulty])\n\n  const getTrivia = () => {\n    setIsRetrieving(true);\n    fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&token=${sessionToken}&category=${category}&difficulty=${difficulty}`)\n      .then(response => {\n        return response.json();\n      })\n      .then(response => {\n        if (response.response_code === 0) {\n          setIsRetrieving(false);\n          setTrivia(response.results);\n        }\n      })\n  }\n\n  const getToken = () => {\n    fetch(`https://opentdb.com/api_token.php?command=request`)\n      .then( response => {\n        return response.json();\n      })\n      .then( response => {\n        setSessionToken( response.token );\n      })\n  }\n\n  const handleSetIsAsking = value => {\n    setIsAsking(value);\n  }\n\n  const handleSetSelected = value => {\n    setSelected(value);\n  }\n\n  const handleSetTotalQuestions = value => {\n    setTotalQuestions(value)\n  }\n\n  const handleSetCategory = value => {\n    setCategory(value)\n  }\n\n  const handleSetDifficulty = value => {\n    setDifficulty(value)\n  }\n\n  const increaseScore = () => {\n    setScore(score + 1);\n  }\n\n  const shuffleOrder =  () => { // can this go into <QuestionDisplay /> ?\n      let array = order;\n  \n      for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * i)\n          const temp = array[i]\n          array[i] = array[j]\n          array[j] = temp\n      }\n\n      if (isAsking) {\n          setOrder(array);\n      }\n  }\n\n  const getQuestion = () => {\n    if ( currentQuestion < totalQuestions - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowFinal(true);\n    }\n  }\n\n  const restart = () => {\n    setScore(0);\n    getTrivia();\n    setCurrentQuestion(-1);\n    setIsAsking(false);\n    setShowFinal(false);\n    setShowHome(true);\n  }\n\n  const next = () => {\n    if (showHome) {\n      setShowHome(false);\n    }\n    setSelected(-1);\n    setIsAsking(true);\n    getQuestion();\n    shuffleOrder();\n  }\n\n  return (\n    <div className=\"App\">\n      { showHome ?\n        <>\n          <HomeDisplay />\n\n          <div className=\"options\">\n            <TotalQuestionInput handleSetTotalQuestions={handleSetTotalQuestions} /> \n            <CategoryDropdown handleSetCategory={handleSetCategory} />\n            <DifficultyDropdown handleSetDifficulty={handleSetDifficulty} />\n          </div>\n        </>\n        :\n        <>\n          <ScoreDisplay \n            score={score} \n            showFinal={showFinal}\n          />\n                     \n          { !showFinal &&\n            <>\n              <ProgressBar progress={( currentQuestion / totalQuestions) * 100}/>\n\n              <QuestionDisplay question={trivia[currentQuestion].question} />\n\n              <ChoiceDisplay \n                correct={trivia[currentQuestion].correct_answer} \n                incorrect={trivia[currentQuestion].incorrect_answers} \n                increaseScore={() => increaseScore()}\n                next={() => next()}\n                order={order}\n                selected={selected}\n                isAsking={isAsking}\n                setIsAsking={handleSetIsAsking}\n                setSelected={handleSetSelected}\n              />\n            </>\n          }\n        </>\n      }\n      \n      <BottomBar \n        ready={sessionToken != null}\n        canRestart={ !showHome }\n        restart={() => restart()}\n        canNext={!isAsking && !isRetrieving}\n        next={() => next()}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { App } from './components/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}